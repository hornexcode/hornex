version: "3.8"

services:
  hornex-postgres:
    container_name: hornex-postgres
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=hornex
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  hornex-api:
    container_name: hornex-api
    restart: always
    build:
      context: ./services/hornex-api
      dockerfile: Dockerfile
      target: local
    ports:
      - "8000:8000"
    volumes:
      - ./services/hornex-api:/src
    env_file:
      - ./services/hornex-api/env/dev.env
    depends_on:
      hornex-postgres:
        condition: service_healthy

  # hornex-grpc:
  #   container_name: hornex-grpc
  #   restart: always
  #   entrypoint: ["python", "manage.py", "grpcserver"]
  #   build:
  #     context: ./services/hornex-api
  #     dockerfile: Dockerfile
  #     target: local
  #   ports:
  #     - "50051:50051"
  #   volumes:
  #     - ./services/hornex-api:/src
  #   env_file:
  #     - ./services/hornex-api/env/dev.env
  #   depends_on:
  #     hornex-postgres:
  #       condition: service_healthy

  hornex-web:
    container_name: hornex-web
    build:
      context: ./services/hornex-web
      dockerfile: Dockerfile
    volumes:
      - ./services/hornex-web:/usr/src/app
    depends_on:
      - hornex-api

  hornex-nginx:
    container_name: hornex-nginx
    build:
      context: ./services/hornex-nginx
      dockerfile: Dockerfile
    ports:
      - "9876:80"
    depends_on:
      - hornex-api
      - hornex-web

  hornex-rabbitmq:
    container_name: hornex-rabbitmq
    image: rabbitmq:3.9.7-management
    ports:
      - "15672:15672"
      - "5672:5672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=hornex
      - RABBITMQ_DEFAULT_PASS=hornex
volumes:
  postgres_data:
  rabbitmq_data:

# Generated by Django 4.2.7 on 2023-11-21 00:16

import apps.tournaments.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Bracket",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("round", models.IntegerField(editable=False)),
            ],
        ),
        migrations.CreateModel(
            name="Code",
            fields=[
                (
                    "code",
                    models.CharField(
                        editable=False, max_length=30, primary_key=True, serialize=False
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="LeagueOfLegendsTournamentProvider",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "region",
                    models.CharField(
                        choices=[
                            ("BR", "Br"),
                            ("EUNE", "Eune"),
                            ("EUW", "Euw"),
                            ("JP", "Jp"),
                            ("KR", "Kr"),
                            ("LAN", "Lan"),
                            ("LAS", "Las"),
                            ("NA", "Na"),
                            ("OCE", "Oce"),
                            ("TR", "Tr"),
                            ("RU", "Ru"),
                        ],
                        default="BR",
                        max_length=10,
                    ),
                ),
                ("url", models.URLField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="Registration",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("accepted", "Accepted"),
                            ("rejected", "Rejected"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=50,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("entry_fee", models.IntegerField(blank=True, default=0, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("pending", "Pending"),
                            ("unpaid", "Unpaid"),
                            ("refunded", "Refunded"),
                            ("cancelled", "Cancelled"),
                            ("past_due", "Past Due"),
                        ],
                        default="pending",
                        max_length=50,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Tier",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name="Tournament",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "game",
                    models.CharField(
                        choices=[("league-of-legends", "League Of Legends")],
                        default="league-of-legends",
                        max_length=50,
                    ),
                ),
                (
                    "platform",
                    models.CharField(
                        choices=[
                            ("pc", "Pc"),
                            ("ps4", "Ps4"),
                            ("xbox", "Xbox"),
                            ("mobile", "Mobile"),
                        ],
                        default="pc",
                        max_length=50,
                    ),
                ),
                ("is_public", models.BooleanField(default=False)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("not_started", "Not Started"),
                            ("started", "Started"),
                            ("finished", "Finished"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="not_started",
                        max_length=50,
                    ),
                ),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("start_time", models.TimeField()),
                ("end_time", models.TimeField()),
                (
                    "feature_image",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "is_entry_free",
                    models.BooleanField(default=False, help_text="No entry fee"),
                ),
                (
                    "is_prize_pool_fixed",
                    models.BooleanField(default=True, help_text="Fixed prize pool"),
                ),
                ("prize_pool", models.IntegerField(blank=True, default=0, null=True)),
                ("entry_fee", models.IntegerField(blank=True, default=0, null=True)),
                ("max_teams", models.IntegerField(default=0)),
                (
                    "team_size",
                    models.IntegerField(
                        default=5,
                        validators=[apps.tournaments.validators.validate_team_size],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="LeagueOfLegendsTournament",
            fields=[
                (
                    "tournament_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="tournaments.tournament",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
            bases=("tournaments.tournament",),
        ),
    ]

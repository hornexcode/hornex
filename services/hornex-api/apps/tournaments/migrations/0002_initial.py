# Generated by Django 5.0.2 on 2024-03-06 12:08

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("teams", "0002_initial"),
        ("tournaments", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="checkin",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AlterUniqueTogether(
            name="leagueoflegendsleague",
            unique_together={("tier", "rank")},
        ),
        migrations.AddField(
            model_name="tournament",
            name="organizer",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.RESTRICT,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="checkin",
            name="tournament",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="checkins",
                to="tournaments.tournament",
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="loser",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="loser",
                to="teams.team",
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="team_a",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="team_a",
                to="teams.team",
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="team_b",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="team_b",
                to="teams.team",
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="tournament",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="matches",
                to="tournaments.tournament",
            ),
        ),
        migrations.AddField(
            model_name="match",
            name="winner",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="winner",
                to="teams.team",
            ),
        ),
        migrations.AddField(
            model_name="participant",
            name="tournament",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="participants",
                to="tournaments.tournament",
            ),
        ),
        migrations.AddField(
            model_name="prize",
            name="tournament",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="prizes",
                to="tournaments.tournament",
            ),
        ),
        migrations.AddField(
            model_name="rank",
            name="team",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="teams.team"
            ),
        ),
        migrations.AddField(
            model_name="rank",
            name="tournament",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="ranks",
                to="tournaments.tournament",
            ),
        ),
        migrations.AddField(
            model_name="tournament",
            name="registered_teams",
            field=models.ManyToManyField(
                blank=True, through="tournaments.Registration", to="teams.team"
            ),
        ),
        migrations.AddField(
            model_name="registration",
            name="team",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="teams.team"
            ),
        ),
        migrations.AddField(
            model_name="registration",
            name="tournament",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="registrations",
                to="tournaments.tournament",
            ),
        ),
        migrations.AddField(
            model_name="rule",
            name="tournament",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="rules",
                to="tournaments.tournament",
            ),
        ),
        migrations.CreateModel(
            name="LeagueOfLegendsTournament",
            fields=[
                (
                    "tournament_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="tournaments.tournament",
                    ),
                ),
                (
                    "pick",
                    models.CharField(
                        choices=[
                            ("BLIND_PICK", "Blind Pick"),
                            ("DRAFT_MODE", "Draft Mode"),
                            ("ALL_RANDOM", "All Random"),
                            ("TOURNAMENT_DRAFT", "Tournament Draft"),
                        ],
                        default="BLIND_PICK",
                        max_length=50,
                    ),
                ),
                (
                    "map",
                    models.CharField(
                        choices=[
                            ("SUMMONERS_RIFT", "Summoners Rift"),
                            ("TWISTED_TREELINE", "Twisted Treeline"),
                            ("HOWLING_ABYSS", "Howling Abyss"),
                        ],
                        default="SUMMONERS_RIFT",
                        max_length=50,
                    ),
                ),
                (
                    "spectator",
                    models.CharField(
                        choices=[
                            ("NONE", "None"),
                            ("LOBBYONLY", "Lobbyonly"),
                            ("ALL", "All"),
                        ],
                        default="LOBBYONLY",
                        max_length=50,
                    ),
                ),
                ("riot_tournament_id", models.IntegerField(blank=True, null=True)),
                (
                    "classifications",
                    models.ManyToManyField(
                        blank=True, to="tournaments.leagueoflegendsleague"
                    ),
                ),
                (
                    "provider",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="tournaments.leagueoflegendsprovider",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
            bases=("tournaments.tournament",),
        ),
        migrations.AddIndex(
            model_name="participant",
            index=models.Index(fields=["team"], name="team_idx"),
        ),
    ]

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: invite.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const InsertTeamInvite = `-- name: InsertTeamInvite :one
INSERT INTO teams_invites (
  team_id,
  user_id
) VALUES (
  $1,
  $2
) RETURNING id, team_id, user_id, status, created_at, updated_at
`

type InsertTeamInviteParams struct {
	TeamID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) InsertTeamInvite(ctx context.Context, arg InsertTeamInviteParams) (TeamsInvites, error) {
	row := q.db.QueryRow(ctx, InsertTeamInvite, arg.TeamID, arg.UserID)
	var i TeamsInvites
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const SelectInviteByIdAndUser = `-- name: SelectInviteByIdAndUser :one
SELECT id, team_id, user_id, status, created_at, updated_at FROM teams_invites WHERE id = $1 AND user_id = $2
`

type SelectInviteByIdAndUserParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) SelectInviteByIdAndUser(ctx context.Context, arg SelectInviteByIdAndUserParams) (TeamsInvites, error) {
	row := q.db.QueryRow(ctx, SelectInviteByIdAndUser, arg.ID, arg.UserID)
	var i TeamsInvites
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const SelectInviteByUserAndTeam = `-- name: SelectInviteByUserAndTeam :one
SELECT id, team_id, user_id, status, created_at, updated_at FROM teams_invites WHERE team_id = $1 AND user_id = $2
`

type SelectInviteByUserAndTeamParams struct {
	TeamID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) SelectInviteByUserAndTeam(ctx context.Context, arg SelectInviteByUserAndTeamParams) (TeamsInvites, error) {
	row := q.db.QueryRow(ctx, SelectInviteByUserAndTeam, arg.TeamID, arg.UserID)
	var i TeamsInvites
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateInvite = `-- name: UpdateInvite :one
UPDATE teams_invites SET status = $1, updated_at = NOW() WHERE id = $2 RETURNING id,team_id, user_id, status, created_at, updated_at
`

type UpdateInviteParams struct {
	Status NullTeamsStatusType
	ID     uuid.UUID
}

func (q *Queries) UpdateInvite(ctx context.Context, arg UpdateInviteParams) (TeamsInvites, error) {
	row := q.db.QueryRow(ctx, UpdateInvite, arg.Status, arg.ID)
	var i TeamsInvites
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

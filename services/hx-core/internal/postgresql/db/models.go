// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type InviteStatusType string

const (
	InviteStatusTypePending  InviteStatusType = "pending"
	InviteStatusTypeAccepted InviteStatusType = "accepted"
	InviteStatusTypeDeclined InviteStatusType = "declined"
)

func (e *InviteStatusType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = InviteStatusType(s)
	case string:
		*e = InviteStatusType(s)
	default:
		return fmt.Errorf("unsupported scan type for InviteStatusType: %T", src)
	}
	return nil
}

type NullInviteStatusType struct {
	InviteStatusType InviteStatusType
	Valid            bool // Valid is true if InviteStatusType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullInviteStatusType) Scan(value interface{}) error {
	if value == nil {
		ns.InviteStatusType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.InviteStatusType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullInviteStatusType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.InviteStatusType), nil
}

type TournamentsStatusType string

const (
	TournamentsStatusTypeCreated   TournamentsStatusType = "created"
	TournamentsStatusTypeStarted   TournamentsStatusType = "started"
	TournamentsStatusTypeFinished  TournamentsStatusType = "finished"
	TournamentsStatusTypeCancelled TournamentsStatusType = "cancelled"
)

func (e *TournamentsStatusType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TournamentsStatusType(s)
	case string:
		*e = TournamentsStatusType(s)
	default:
		return fmt.Errorf("unsupported scan type for TournamentsStatusType: %T", src)
	}
	return nil
}

type NullTournamentsStatusType struct {
	TournamentsStatusType TournamentsStatusType
	Valid                 bool // Valid is true if TournamentsStatusType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTournamentsStatusType) Scan(value interface{}) error {
	if value == nil {
		ns.TournamentsStatusType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TournamentsStatusType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTournamentsStatusType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TournamentsStatusType), nil
}

type EmailsConfirmationCode struct {
	ID               uuid.UUID
	Email            string
	ConfirmationCode string
	CreatedAt        pgtype.Timestamp
}

type Games struct {
	ID   uuid.UUID
	Name string
	Slug string
}

type LeagueOfLegendsAccounts struct {
	ID            string
	UserID        uuid.UUID
	AccountID     string
	Region        string
	Puuid         string
	SummonerName  string
	SummonerLevel int32
	ProfileIconID int32
	RevisionDate  int64
	Verified      bool
	CreatedAt     pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
}

type Teams struct {
	ID        uuid.UUID
	Name      string
	GameID    uuid.UUID
	CreatedBy uuid.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

type TeamsInvites struct {
	ID        uuid.UUID
	TeamID    uuid.UUID
	UserID    uuid.UUID
	Status    NullInviteStatusType
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

type TeamsMembers struct {
	TeamID    uuid.UUID
	UserID    uuid.UUID
	CreatedAt pgtype.Timestamp
}

type Tournaments struct {
	ID          uuid.UUID
	Name        string
	GameID      uuid.UUID
	Description pgtype.Text
	EntryFee    int32
	PrizePool   int32
	IsActive    pgtype.Bool
	Status      NullTournamentsStatusType
	DueDate     pgtype.Timestamp
	CreatedBy   uuid.UUID
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

type Users struct {
	ID             uuid.UUID
	Email          string
	Password       string
	FirstName      string
	LastName       string
	BirthDate      pgtype.Date
	EmailConfirmed bool
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
}

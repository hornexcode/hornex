// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: team.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const InsertTeam = `-- name: InsertTeam :one
INSERT INTO teams (
  name,
  created_by
)
VALUES (
  $1,
  $2
)
RETURNING id, created_at, updated_at
`

type InsertTeamParams struct {
	Name      string
	CreatedBy uuid.UUID
}

type InsertTeamRow struct {
	ID        uuid.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) InsertTeam(ctx context.Context, arg InsertTeamParams) (InsertTeamRow, error) {
	row := q.db.QueryRow(ctx, InsertTeam, arg.Name, arg.CreatedBy)
	var i InsertTeamRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const SelectTeamById = `-- name: SelectTeamById :one
SELECT id, name, created_by, created_at, updated_at FROM teams WHERE id = $1
`

func (q *Queries) SelectTeamById(ctx context.Context, id uuid.UUID) (Teams, error) {
	row := q.db.QueryRow(ctx, SelectTeamById, id)
	var i Teams
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const SelectTeamByName = `-- name: SelectTeamByName :one
SELECT id, name, created_by, created_at, updated_at FROM teams WHERE name = $1
`

func (q *Queries) SelectTeamByName(ctx context.Context, name string) (Teams, error) {
	row := q.db.QueryRow(ctx, SelectTeamByName, name)
	var i Teams
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const SelectTeamsByCreatorId = `-- name: SelectTeamsByCreatorId :many
SELECT id, name, created_by, created_at, updated_at FROM teams WHERE created_by = $1
`

func (q *Queries) SelectTeamsByCreatorId(ctx context.Context, createdBy uuid.UUID) ([]Teams, error) {
	rows, err := q.db.Query(ctx, SelectTeamsByCreatorId, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Teams{}
	for rows.Next() {
		var i Teams
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateTeam = `-- name: UpdateTeam :one
UPDATE teams SET name = $1, updated_at = NOW() WHERE id = $2 RETURNING id, created_by, created_at, updated_at
`

type UpdateTeamParams struct {
	Name string
	ID   uuid.UUID
}

type UpdateTeamRow struct {
	ID        uuid.UUID
	CreatedBy uuid.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) (UpdateTeamRow, error) {
	row := q.db.QueryRow(ctx, UpdateTeam, arg.Name, arg.ID)
	var i UpdateTeamRow
	err := row.Scan(
		&i.ID,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

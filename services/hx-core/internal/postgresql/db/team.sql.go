// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: team.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const DeleteTeamMember = `-- name: DeleteTeamMember :one
DELETE FROM teams_members WHERE team_id = $1 AND user_id = $2 RETURNING user_id, team_id
`

type DeleteTeamMemberParams struct {
	TeamID uuid.UUID
	UserID uuid.UUID
}

type DeleteTeamMemberRow struct {
	UserID uuid.UUID
	TeamID uuid.UUID
}

func (q *Queries) DeleteTeamMember(ctx context.Context, arg DeleteTeamMemberParams) (DeleteTeamMemberRow, error) {
	row := q.db.QueryRow(ctx, DeleteTeamMember, arg.TeamID, arg.UserID)
	var i DeleteTeamMemberRow
	err := row.Scan(&i.UserID, &i.TeamID)
	return i, err
}

const InsertTeam = `-- name: InsertTeam :one
INSERT INTO teams (
  name,
  game_id,
  created_by
)
VALUES (
  $1,
  $2,
  $3
)
RETURNING id, created_at, updated_at
`

type InsertTeamParams struct {
	Name      string
	GameID    uuid.UUID
	CreatedBy uuid.UUID
}

type InsertTeamRow struct {
	ID        uuid.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) InsertTeam(ctx context.Context, arg InsertTeamParams) (InsertTeamRow, error) {
	row := q.db.QueryRow(ctx, InsertTeam, arg.Name, arg.GameID, arg.CreatedBy)
	var i InsertTeamRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const InsertTeamInvite = `-- name: InsertTeamInvite :one
INSERT INTO teams_invites (
  team_id,
  user_id
) VALUES (
  $1,
  $2
) RETURNING id, team_id, user_id, status, created_at, updated_at
`

type InsertTeamInviteParams struct {
	TeamID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) InsertTeamInvite(ctx context.Context, arg InsertTeamInviteParams) (TeamsInvites, error) {
	row := q.db.QueryRow(ctx, InsertTeamInvite, arg.TeamID, arg.UserID)
	var i TeamsInvites
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const InsertTeamMember = `-- name: InsertTeamMember :one
INSERT INTO teams_members (
  team_id,
  user_id
) VALUES (
  $1,
  $2
) RETURNING team_id, user_id, created_at
`

type InsertTeamMemberParams struct {
	TeamID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) InsertTeamMember(ctx context.Context, arg InsertTeamMemberParams) (TeamsMembers, error) {
	row := q.db.QueryRow(ctx, InsertTeamMember, arg.TeamID, arg.UserID)
	var i TeamsMembers
	err := row.Scan(&i.TeamID, &i.UserID, &i.CreatedAt)
	return i, err
}

const SelectInviteByIdAndUser = `-- name: SelectInviteByIdAndUser :one
SELECT id, team_id, user_id, status, created_at, updated_at FROM teams_invites WHERE id = $1 AND user_id = $2
`

type SelectInviteByIdAndUserParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) SelectInviteByIdAndUser(ctx context.Context, arg SelectInviteByIdAndUserParams) (TeamsInvites, error) {
	row := q.db.QueryRow(ctx, SelectInviteByIdAndUser, arg.ID, arg.UserID)
	var i TeamsInvites
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const SelectInviteByUserAndTeam = `-- name: SelectInviteByUserAndTeam :one
SELECT id, team_id, user_id, status, created_at, updated_at FROM teams_invites WHERE team_id = $1 AND user_id = $2
`

type SelectInviteByUserAndTeamParams struct {
	TeamID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) SelectInviteByUserAndTeam(ctx context.Context, arg SelectInviteByUserAndTeamParams) (TeamsInvites, error) {
	row := q.db.QueryRow(ctx, SelectInviteByUserAndTeam, arg.TeamID, arg.UserID)
	var i TeamsInvites
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const SelectTeamById = `-- name: SelectTeamById :one
SELECT id, name, game_id, created_by, created_at, updated_at FROM teams WHERE id = $1
`

func (q *Queries) SelectTeamById(ctx context.Context, id uuid.UUID) (Teams, error) {
	row := q.db.QueryRow(ctx, SelectTeamById, id)
	var i Teams
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GameID,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const SelectTeamByName = `-- name: SelectTeamByName :one
SELECT id, name, game_id, created_by, created_at, updated_at FROM teams WHERE name = $1
`

func (q *Queries) SelectTeamByName(ctx context.Context, name string) (Teams, error) {
	row := q.db.QueryRow(ctx, SelectTeamByName, name)
	var i Teams
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GameID,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const SelectTeamsByCreatorId = `-- name: SelectTeamsByCreatorId :many
SELECT id, name, game_id, created_by, created_at, updated_at FROM teams WHERE created_by = $1
`

func (q *Queries) SelectTeamsByCreatorId(ctx context.Context, createdBy uuid.UUID) ([]Teams, error) {
	rows, err := q.db.Query(ctx, SelectTeamsByCreatorId, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Teams{}
	for rows.Next() {
		var i Teams
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.GameID,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateInvite = `-- name: UpdateInvite :one
UPDATE teams_invites SET status = $1, updated_at = NOW() WHERE id = $2 RETURNING id,team_id, user_id, status, created_at, updated_at
`

type UpdateInviteParams struct {
	Status NullTeamsStatusType
	ID     uuid.UUID
}

func (q *Queries) UpdateInvite(ctx context.Context, arg UpdateInviteParams) (TeamsInvites, error) {
	row := q.db.QueryRow(ctx, UpdateInvite, arg.Status, arg.ID)
	var i TeamsInvites
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateTeam = `-- name: UpdateTeam :one
UPDATE teams SET name = $1, updated_at = NOW() WHERE id = $2 RETURNING id, created_by, created_at, updated_at
`

type UpdateTeamParams struct {
	Name string
	ID   uuid.UUID
}

type UpdateTeamRow struct {
	ID        uuid.UUID
	CreatedBy uuid.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) (UpdateTeamRow, error) {
	row := q.db.QueryRow(ctx, UpdateTeam, arg.Name, arg.ID)
	var i UpdateTeamRow
	err := row.Scan(
		&i.ID,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: tournament.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const InsertTournament = `-- name: InsertTournament :one
INSERT INTO tournaments (
  name,
  game_id,
  description,
  entry_fee,
  prize_pool,
  is_active,
  status,
  due_date,
  created_by
)
VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9
)
RETURNING id, name, created_at
`

type InsertTournamentParams struct {
	Name        string
	GameID      uuid.UUID
	Description pgtype.Text
	EntryFee    int32
	PrizePool   int32
	IsActive    pgtype.Bool
	Status      NullTournamentsStatusType
	DueDate     pgtype.Timestamp
	CreatedBy   uuid.UUID
}

type InsertTournamentRow struct {
	ID        uuid.UUID
	Name      string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) InsertTournament(ctx context.Context, arg InsertTournamentParams) (InsertTournamentRow, error) {
	row := q.db.QueryRow(ctx, InsertTournament,
		arg.Name,
		arg.GameID,
		arg.Description,
		arg.EntryFee,
		arg.PrizePool,
		arg.IsActive,
		arg.Status,
		arg.DueDate,
		arg.CreatedBy,
	)
	var i InsertTournamentRow
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const SelectTournamentByName = `-- name: SelectTournamentByName :one
SELECT id, name, game_id, description, entry_fee, prize_pool, is_active, status, due_date, created_by, created_at, updated_at FROM tournaments WHERE name = $1
`

func (q *Queries) SelectTournamentByName(ctx context.Context, name string) (Tournaments, error) {
	row := q.db.QueryRow(ctx, SelectTournamentByName, name)
	var i Tournaments
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GameID,
		&i.Description,
		&i.EntryFee,
		&i.PrizePool,
		&i.IsActive,
		&i.Status,
		&i.DueDate,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

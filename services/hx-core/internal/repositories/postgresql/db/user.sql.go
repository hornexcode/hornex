// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const InsertUser = `-- name: InsertUser :one
INSERT INTO users (
  email,
  first_name,
  last_name,
  birth_date,
  password
)
VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
)
RETURNING id, created_at, updated_at
`

type InsertUserParams struct {
	Email     string
	FirstName string
	LastName  string
	BirthDate pgtype.Date
	Password  string
}

type InsertUserRow struct {
	ID        uuid.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (InsertUserRow, error) {
	row := q.db.QueryRow(ctx, InsertUser,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.BirthDate,
		arg.Password,
	)
	var i InsertUserRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const SelectUserByEmail = `-- name: SelectUserByEmail :one
SELECT id, email, password, first_name, last_name, birth_date, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) SelectUserByEmail(ctx context.Context, email string) (Users, error) {
	row := q.db.QueryRow(ctx, SelectUserByEmail, email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.BirthDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
